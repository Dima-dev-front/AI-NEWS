name: ai-news-cron

on:
  schedule:
    - cron: "0 */2 * * *"  # каждые 2 часа
  workflow_dispatch: {}

permissions:
  contents: write  # чтобы коммитить обновлённые data/*.json

concurrency:
  group: ai-news-cron
  cancel-in-progress: true

jobs:
  run-on-schedule:
    runs-on: ubuntu-latest
    environment: TELEGRAM_TOKEN
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # allow pushing back

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --no-cache-dir -r requirements.txt

      - name: Prepare data directory
        run: |
          mkdir -p data
          [ -f data/published.json ] || echo "[]" > data/published.json
          [ -f data/recent_titles.json ] || echo "[]" > data/recent_titles.json

      - name: Show HEAD and sanity-check code
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          CHAT_ID: ${{ secrets.CHAT_ID }}
        run: |
          echo "HEAD=" $(git rev-parse HEAD)
          echo "news.py exists:" $(test -f news.py && echo "true" || echo "false")
          echo "bot.py exists:" $(test -f bot.py && echo "true" || echo "false")
          echo "TELEGRAM_TOKEN length:" ${#TELEGRAM_TOKEN}
          echo "CHAT_ID length:" ${#CHAT_ID}
          python -c "import news; print('NewsFetcher loaded successfully')" || echo "Warning: news.py import failed"

      - name: Create .env from secrets/vars
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          CHAT_ID: ${{ secrets.CHAT_ID }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          LLM_PROVIDER: ${{ secrets.LLM_PROVIDER }}
          MODEL_NAME: ${{ secrets.MODEL_NAME }}
          DISABLE_OPENAI: ${{ secrets.DISABLE_OPENAI }}
          RSS_FEEDS: ${{ vars.RSS_FEEDS }}
        run: |
          echo "Creating .env file..."
          echo "TELEGRAM_TOKEN length in create step:" ${#TELEGRAM_TOKEN}
          echo "CHAT_ID length in create step:" ${#CHAT_ID}
          cat > .env <<EOF
          TELEGRAM_TOKEN=${TELEGRAM_TOKEN}
          CHAT_ID=${CHAT_ID}
          OPENAI_API_KEY=${OPENAI_API_KEY}
          LLM_PROVIDER=${LLM_PROVIDER:-openai}
          MODEL_NAME=${MODEL_NAME:-gpt-4o-mini}
          DISABLE_OPENAI=${DISABLE_OPENAI:-0}
          RSS_FEEDS=${RSS_FEEDS}
          CHECK_INTERVAL_MIN=120
          MAX_POSTS_PER_CYCLE=1
          POST_DELAY_SEC=2
          RECENT_TITLES_MAX=300
          RUN_ONCE=1
          REQUIRE_MEDIA=1
          EOF
          echo "Created .env file, checking contents:"
          head -3 .env | sed 's/=.*$/=***/' || echo "Failed to read .env"

      - name: Run bot every 2 minutes (5 iterations)
        env:
          ITERATIONS: 5
          SLEEP_SEC: 120
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          CHAT_ID: ${{ secrets.CHAT_ID }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          LLM_PROVIDER: ${{ secrets.LLM_PROVIDER }}
          MODEL_NAME: ${{ secrets.MODEL_NAME }}
          DISABLE_OPENAI: ${{ secrets.DISABLE_OPENAI }}
          RSS_FEEDS: ${{ vars.RSS_FEEDS }}
        run: |
          echo "Environment variables in run step:"
          echo "TELEGRAM_TOKEN length:" ${#TELEGRAM_TOKEN}
          echo "CHAT_ID length:" ${#CHAT_ID}
          echo "Checking .env file exists:" $(test -f .env && echo "yes" || echo "no")
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          i=1
          while [ "$i" -le "${ITERATIONS}" ]; do
            echo "[AI-NEWS] Iteration $i/${ITERATIONS}"
            python -u bot.py || true
            echo "[AI-NEWS] Git status after iteration:" && git status --porcelain data || true
            # commit state after each iteration to persist dedupe across jobs
            git add -f data/published.json data/recent_titles.json || true
            if ! git diff --cached --quiet -- data; then
              git commit -m "chore(data): update published/titles [skip ci]" || true
              git pull --rebase || true
              git push || true
            else
              echo "[AI-NEWS] No data changes to commit"
            fi
            if [ "$i" -lt "${ITERATIONS}" ]; then
              echo "Sleeping ${SLEEP_SEC}s..."
              sleep "${SLEEP_SEC}"
            fi
            i=$((i+1))
          done

      - name: Commit data changes (published/titles)
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          CHAT_ID: ${{ secrets.CHAT_ID }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          LLM_PROVIDER: ${{ secrets.LLM_PROVIDER }}
          MODEL_NAME: ${{ secrets.MODEL_NAME }}
          DISABLE_OPENAI: ${{ secrets.DISABLE_OPENAI }}
          RSS_FEEDS: ${{ vars.RSS_FEEDS }}
        run: |
          git add -f data/published.json data/recent_titles.json || true
          if ! git diff --cached --quiet -- data; then
            git config user.name "github-actions"
            git config user.email "github-actions@github.com"
            git commit -m "chore(data): update published and titles [skip ci]" || true
            git pull --rebase || true
            git push || true
          else
            echo "[AI-NEWS] No data changes to commit at finalization"
          fi


